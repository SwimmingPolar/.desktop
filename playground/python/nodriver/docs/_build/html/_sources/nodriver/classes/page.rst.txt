.. _tab:

Tab class
-----------------------

:ref:`tab` is the controlling mechanism/connection to a 'target',
for most of us 'target' can be read as 'tab'. however it could also
be an iframe, serviceworker or background script for example,
although there isn't much to control for those.

if you open a new window by using `:py:meth:`browser.get(..., new_window=True)`
your url will open a new window. this window is a 'tab'.
When you browse to another page, the tab will be the same (it is an browser view).

So it's important to keep some reference to tab objects, in case you're
done interacting with elements and want to operate on the page level again.

Tab object provide many usefull and often-used methods. It is also
possible to utilize the included cdp classes to to something totally custom.

the cdp package is a set of so called "domains" with each having methods, events and types.
to send a cdp method, for example :py:obj:`cdp.page.navigate`, you'll have to check
whether the method accepts any parameters and whether they are required or not.

you can use :py:meth:`Tab.send(cdp.page.navigate(url='https://yoururlhere'))`.
so tab.send() accepts a generator which is exactly what the cdp methods create.

some words about page connection

.. autoclass::  nodriver.Tab
    :members:
    :inherited-members:
    :member-order: alphabetical
    :undoc-members:
    :exclude-members: __setattr__



